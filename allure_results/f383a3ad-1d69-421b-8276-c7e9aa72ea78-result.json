{"name": "Проверка двух кнопок \"Заказать\" на Главной странице", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: Element <button class=\"Button_Button__ra12g Button_Middle__1CSJM\"> is not clickable at point (603,30) because another element <div class=\"Header_Header__214zg\"> obscures it\nStacktrace:\nRemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nWebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:189:5\nElementClickInterceptedError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:333:5\nwebdriverClickElement@chrome://remote/content/marionette/interaction.sys.mjs:160:11\ninteraction.clickElement@chrome://remote/content/marionette/interaction.sys.mjs:119:11\nclickElement@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:202:29\nreceiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:84:31", "trace": "self = <test_order_page.TestOrderPage object at 0x0000021C978BAB90>, setup_driver = None\nlocator = ['xpath', \"(.//button[text()='Заказать'])[2]\"]\n\n    @allure.title('Проверка двух кнопок \"Заказать\" на Главной странице')\n    @allure.description('На Главной странице ищем кнопку \"Заказать\" и проверяем, что по клику открывается страница заказа')\n    @pytest.mark.parametrize('locator', [locators.MAIN_PAGE_HEADER_ORDER_BUTTON,\n                                         locators.MAIN_PAGE_FOOTER_ORDER_BUTTON])\n    def test_main_page_order_button(self, setup_driver, locator):\n        \"\"\" Проверяем кнопки 'Заказать' на Главной странице\n            Параметризованный тест для проверки двух кнопок 'Заказать':\n            - в хедере Главной страницы\n            - внизу Главной страницы\n        \"\"\"\n        # открываем Главную страницу\n        self.main_page.open_main_page()\n    \n        # ждем загрузки главной страницы\n        self.main_page.wait_for_load_main_page()\n    \n        # кликаем согласие с куками\n        self.main_page.click_accept_cookies_button()\n    \n        # прокручиваем страницу до кнопки Заказать\n        self.main_page.scroll_to_order_button(locator)\n    \n        # кликаем кнопку Заказать\n>       self.main_page.click_order_button(locator)\n\ntests\\test_order_page.py:66: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages\\main_page_questions.py:48: in click_order_button\n    self.driver.find_element(*locator).click()\n..\\qa_python_1\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\qa_python_1\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:394: in _execute\n    return self._parent.execute(command, params)\n..\\qa_python_1\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000021C9785C450>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"Element <button class=\\\\\"Button_But...sys.mjs:202:29\\\\nreceiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:84:31\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: Element <button class=\"Button_Button__ra12g Button_Middle__1CSJM\"> is not clickable at point (603,30) because another element <div class=\"Header_Header__214zg\"> obscures it\nE       Stacktrace:\nE       RemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nE       WebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:189:5\nE       ElementClickInterceptedError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:333:5\nE       webdriverClickElement@chrome://remote/content/marionette/interaction.sys.mjs:160:11\nE       interaction.clickElement@chrome://remote/content/marionette/interaction.sys.mjs:119:11\nE       clickElement@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:202:29\nE       receiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:84:31\n\n..\\qa_python_1\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException"}, "description": "На Главной странице ищем кнопку \"Заказать\" и проверяем, что по клику открывается страница заказа", "steps": [{"name": "Открываем Главную страницу", "status": "passed", "start": 1700523895722, "stop": 1700523897776}, {"name": "Ждем загрузку Главной страницы", "status": "passed", "start": 1700523897777, "stop": 1700523897820}, {"name": "Кликаем согласие с куки", "status": "passed", "start": 1700523897820, "stop": 1700523898062}, {"name": "Прокручиваем страницу до кнопки \"Заказать\"", "status": "passed", "parameters": [{"name": "locator", "value": "['xpath', \"(.//button[text()='Заказать'])[2]\"]"}], "start": 1700523898062, "stop": 1700523898072}, {"name": "Кликаем кнопку \"Заказать\"", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: Element <button class=\"Button_Button__ra12g Button_Middle__1CSJM\"> is not clickable at point (603,30) because another element <div class=\"Header_Header__214zg\"> obscures it\nStacktrace:\nRemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8\nWebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:189:5\nElementClickInterceptedError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:333:5\nwebdriverClickElement@chrome://remote/content/marionette/interaction.sys.mjs:160:11\ninteraction.clickElement@chrome://remote/content/marionette/interaction.sys.mjs:119:11\nclickElement@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:202:29\nreceiveMessage@chrome://remote/content/marionette/actors/MarionetteCommandsChild.sys.mjs:84:31\n\n", "trace": "  File \"C:\\Python_projects\\Python_QA\\qa_python_1\\venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"C:\\Python_projects\\Python_QA\\qa_python_6\\pages\\main_page_questions.py\", line 48, in click_order_button\n    self.driver.find_element(*locator).click()\n  File \"C:\\Python_projects\\Python_QA\\qa_python_1\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 93, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"C:\\Python_projects\\Python_QA\\qa_python_1\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 394, in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Python_projects\\Python_QA\\qa_python_1\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 344, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\Python_projects\\Python_QA\\qa_python_1\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "parameters": [{"name": "locator", "value": "['xpath', \"(.//button[text()='Заказать'])[2]\"]"}], "start": 1700523898072, "stop": 1700523898082}], "parameters": [{"name": "locator", "value": "['xpath', \"(.//button[text()='Заказать'])[2]\"]"}], "start": 1700523895721, "stop": 1700523898118, "uuid": "cf87bdbc-97d2-4386-a964-cd960ac7fc99", "historyId": "2789b7bdc2171c862ec40afd744273ee", "testCaseId": "241c4c6c98740fe60d62e1c245ec9c1e", "fullName": "tests.test_order_page.TestOrderPage#test_main_page_order_button", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_order_page"}, {"name": "subSuite", "value": "TestOrderPage"}, {"name": "host", "value": "DESKTOP-O6MNHQN"}, {"name": "thread", "value": "13600-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_order_page"}]}